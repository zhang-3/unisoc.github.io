{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Official documentation for UNISOC IoT devices. It provides a comprehensive guide to using the UNISOC IoT Edition boards. Chips UNISOC chips designed for IoT industry. Boards Custom or official boards based on UNISOC IoT chips. SDK In a few simple steps, learn how to build and flash the whole program to the board. Demos Some typical applications. Tools Usefull tools.","title":"Home"},{"location":"#overview","text":"Official documentation for UNISOC IoT devices. It provides a comprehensive guide to using the UNISOC IoT Edition boards. Chips UNISOC chips designed for IoT industry. Boards Custom or official boards based on UNISOC IoT chips. SDK In a few simple steps, learn how to build and flash the whole program to the board. Demos Some typical applications. Tools Usefull tools.","title":"Overview"},{"location":"about/","text":"About UNISOC IoT Documentation was created by mkdocs. If you want to generate html format document, please follow below steps. Install required packages pip install --upgrade pip #upgrade pip to the latest version pip install mkdocs #install the mkdocs package pip install mkdocs-material #install the Material theme package You can also look into the officail website of mkdocs and Merterial for more details. Get the document sources git clone https://github.com/unisoc/documentation.git Build html docs cd documentation mkdocs build The HTML documents will be generated under site directory in a few seconds.","title":"About"},{"location":"about/#about","text":"UNISOC IoT Documentation was created by mkdocs. If you want to generate html format document, please follow below steps.","title":"About"},{"location":"about/#install-required-packages","text":"pip install --upgrade pip #upgrade pip to the latest version pip install mkdocs #install the mkdocs package pip install mkdocs-material #install the Material theme package You can also look into the officail website of mkdocs and Merterial for more details.","title":"Install required packages"},{"location":"about/#get-the-document-sources","text":"git clone https://github.com/unisoc/documentation.git","title":"Get the document sources"},{"location":"about/#build-html-docs","text":"cd documentation mkdocs build The HTML documents will be generated under site directory in a few seconds.","title":"Build html docs"},{"location":"boards/","text":"Boards 96Boards IVY5661 IVY5661 board is designed by uCRobotics based on UNISOC UWP5661 chip.","title":"Overview"},{"location":"boards/#boards","text":"96Boards IVY5661 IVY5661 board is designed by uCRobotics based on UNISOC UWP5661 chip.","title":"Boards"},{"location":"boards/96b_ivy5661/","text":"96Boards IVY5661","title":"96Boards IVY5661"},{"location":"boards/96b_ivy5661/#96boards-ivy5661","text":"","title":"96Boards IVY5661"},{"location":"chips/","text":"UNISOC IoT Chips UWP5661 UWP5661 is a highly integrated 2-in-1 connectivity single chip.","title":"Overview"},{"location":"chips/#unisoc-iot-chips","text":"UWP5661 UWP5661 is a highly integrated 2-in-1 connectivity single chip.","title":"UNISOC IoT Chips"},{"location":"chips/UWP5661/","text":"Overview UWP5661 is a highly integrated 2-in-1 connectivity single chip which offers the lowest RBOM in the industry for smart home, IoT, industrial control and automotive applications. This chip includes 2.4GHz and 5GHz WLAN IEEE802.11 a/b/g/n/ac 2x2 MU-MIMO 20/40/80 MHz VHT R2 MAC/PHY/Radio, Bluetooth 5 with supporting high power mode, mesh, direction finding and long range. Additionally, this radio-on-chip integrates power amplifiers, receive low noise amplifiers and RF TR switch. This chip includes two ARM Cortex-M4 processors. One is used for offloaded Wi-Fi software and Bluetooth controller. The other is used for application processor. UWP5661 also supports interface including SFC, JTAG, I2S, UART and I2C. Features Microcontroller 416MHz ARM\u00ae Cortex\u00ae-M4 for user application customization and development 256MHz ARM\u00ae Cortex\u00ae-M4 and internal SRAM for embedded Wi-Fi and Bluetooth 1 system timer, 1 common timer and 3 general propose timers Hardware DFS from 26MHz to 416MHz Development support: SWD, JTAG Memory 963KB internal SRAM in application processor and 208MHz maximum frequency 32KB I-Cache and 32KB D-Cache in application process 412KB available SRAM for user application Supports to up to 32MB external nor flash and 104MHz maximum frequency 14 DMA channels Wi-Fi features Dual band 2.4/5 GHz 2x2 20/40/80 MHz IEEE 802.11 a/b/g/n/ac Complies with Wi-Fi VHT R2, supports MU-MIMO DL and beamfomee UNISOC Extreme provides QAM-256 in 2.4GHz band to improve 33% throughput UNISOC Green Wi-Fi provides excellent low power consumption features in Wi-Fi normal operation and low power states Support IEEE 802.11mv FTM, Wi-Fi Location and timing measurement Support WMM-PS QoS, Wi-Fi Direct, Miracast R2, Passpoint 2.0, MBO, Wi-Fi Aware R2, etc. Support WEP, WPA/WPA2, WPS 2.0, WAPI, WPI-SM4, EAP-TLS/EAP-TTLS/EAP-PEAP/EAP-SIM/EAP-AKA, IEEE 802.11w Protected Management Frame Complies with IEEE 802.11 d/e/h/i/k/r/u/v/z Supports both single and multiple channel concurrency Support background scan, ARP, IP checksum, IPv6 NS offloading Support spur immunity to avoid performance degradation caused by spur generated by PCB Bluetooth Features Bluetooth specification 5.0, Bluetooth Smart Ready compliant Bluetooth classic and Low Energy dual mode concurrent operation Supports L2 2Mbps, LE advertise Extension, Long Range, AoD direction Finding and Mesh Integrated 10 dBm high efficiency on-chip PA for low energy application Integrated 20 dBm high power on-chip PA for Bluetooth high power mode application Integrated wide-band speech processiong to improve voice quality Supports Low Energy background scan for contex awareness application Supports multiple piconets and up to 16 concurrent Bluetooth Low Energy concurrent links Clock source Supports Standard 26/38.4 MHz crystal and reference clock input Supports internal 32KHz RC Package 204 Balls BGA package (6.9mm x 6.9mm, 0.4 mm pitch) Memory Map module name start end onchip RAM 0x00100000 0x001EF000 flash 0x02000000 0x023FFFFF interrupt contoller 0x40000000 0x40007FFF watchdog 0x40010000 0x40017FFF system timer 0x40018000 0x4001FFFF timer0 0x40020000 0x40027FFF timer1 0x40050000 0x40057FFF iis 0x40030000 0x40037FFF uart0 0x40038000 0x4003FFFF uart1 0x40040000 0x40047FFF wci2 0x40048000 0x4004FFFF common timer 0x40080000 0x40087FFF glb reg 0x40088000 0x4008FFFF dma 0x40120000 0x4012FFFF sdio 0x40140000 0x4014FFFF ahb 0x40130000 0x40137FFF interrupt controller 0x40800000 0x40803FFF gpio0 0x40804000 0x40807FFF gpio1 0x40808000 0x4080BFFF gpio2 0x4080C000 0x4080FFFF aon system timer 0x40824000 0x40827FFF aon timer 0x40828000 0x4082BFFF i2c 0x40834000 0x40837FFF uart2 0x40838000 0x4083BFFF pinmux 0x40840000 0x40843FFF clock 0x40844000 0x40847FFF spinlock 0x40850000 0x40853FFF sfc 0x42000000 0x43FFFFFF sfc cfg 0x40890000 0x4089FFFF Interrupt Number NVIC number name 0 INTC FIQ 1 INTC IRQ 18 wci2 20 INTC AON 21 timer0 22 timer1 23 timer2 26 system timer 35 uart0 36 uart1 37 common timer 40 watchdog INTC FIQ number name 1 soft irq INTC IRQ number name 1 soft irq INTC AON number name 1 soft irq 2 sfc 8 gpio2 9 gpio1 10 gpio0 12 uart2 16 aon system timer 17 i2c","title":"UWP5661"},{"location":"chips/UWP5661/#overview","text":"UWP5661 is a highly integrated 2-in-1 connectivity single chip which offers the lowest RBOM in the industry for smart home, IoT, industrial control and automotive applications. This chip includes 2.4GHz and 5GHz WLAN IEEE802.11 a/b/g/n/ac 2x2 MU-MIMO 20/40/80 MHz VHT R2 MAC/PHY/Radio, Bluetooth 5 with supporting high power mode, mesh, direction finding and long range. Additionally, this radio-on-chip integrates power amplifiers, receive low noise amplifiers and RF TR switch. This chip includes two ARM Cortex-M4 processors. One is used for offloaded Wi-Fi software and Bluetooth controller. The other is used for application processor. UWP5661 also supports interface including SFC, JTAG, I2S, UART and I2C.","title":"Overview"},{"location":"chips/UWP5661/#features","text":"","title":"Features"},{"location":"chips/UWP5661/#microcontroller","text":"416MHz ARM\u00ae Cortex\u00ae-M4 for user application customization and development 256MHz ARM\u00ae Cortex\u00ae-M4 and internal SRAM for embedded Wi-Fi and Bluetooth 1 system timer, 1 common timer and 3 general propose timers Hardware DFS from 26MHz to 416MHz Development support: SWD, JTAG","title":"Microcontroller"},{"location":"chips/UWP5661/#memory","text":"963KB internal SRAM in application processor and 208MHz maximum frequency 32KB I-Cache and 32KB D-Cache in application process 412KB available SRAM for user application Supports to up to 32MB external nor flash and 104MHz maximum frequency 14 DMA channels","title":"Memory"},{"location":"chips/UWP5661/#wi-fi-features","text":"Dual band 2.4/5 GHz 2x2 20/40/80 MHz IEEE 802.11 a/b/g/n/ac Complies with Wi-Fi VHT R2, supports MU-MIMO DL and beamfomee UNISOC Extreme provides QAM-256 in 2.4GHz band to improve 33% throughput UNISOC Green Wi-Fi provides excellent low power consumption features in Wi-Fi normal operation and low power states Support IEEE 802.11mv FTM, Wi-Fi Location and timing measurement Support WMM-PS QoS, Wi-Fi Direct, Miracast R2, Passpoint 2.0, MBO, Wi-Fi Aware R2, etc. Support WEP, WPA/WPA2, WPS 2.0, WAPI, WPI-SM4, EAP-TLS/EAP-TTLS/EAP-PEAP/EAP-SIM/EAP-AKA, IEEE 802.11w Protected Management Frame Complies with IEEE 802.11 d/e/h/i/k/r/u/v/z Supports both single and multiple channel concurrency Support background scan, ARP, IP checksum, IPv6 NS offloading Support spur immunity to avoid performance degradation caused by spur generated by PCB","title":"Wi-Fi features"},{"location":"chips/UWP5661/#bluetooth-features","text":"Bluetooth specification 5.0, Bluetooth Smart Ready compliant Bluetooth classic and Low Energy dual mode concurrent operation Supports L2 2Mbps, LE advertise Extension, Long Range, AoD direction Finding and Mesh Integrated 10 dBm high efficiency on-chip PA for low energy application Integrated 20 dBm high power on-chip PA for Bluetooth high power mode application Integrated wide-band speech processiong to improve voice quality Supports Low Energy background scan for contex awareness application Supports multiple piconets and up to 16 concurrent Bluetooth Low Energy concurrent links","title":"Bluetooth Features"},{"location":"chips/UWP5661/#clock-source","text":"Supports Standard 26/38.4 MHz crystal and reference clock input Supports internal 32KHz RC","title":"Clock source"},{"location":"chips/UWP5661/#package","text":"204 Balls BGA package (6.9mm x 6.9mm, 0.4 mm pitch)","title":"Package"},{"location":"chips/UWP5661/#memory-map","text":"module name start end onchip RAM 0x00100000 0x001EF000 flash 0x02000000 0x023FFFFF interrupt contoller 0x40000000 0x40007FFF watchdog 0x40010000 0x40017FFF system timer 0x40018000 0x4001FFFF timer0 0x40020000 0x40027FFF timer1 0x40050000 0x40057FFF iis 0x40030000 0x40037FFF uart0 0x40038000 0x4003FFFF uart1 0x40040000 0x40047FFF wci2 0x40048000 0x4004FFFF common timer 0x40080000 0x40087FFF glb reg 0x40088000 0x4008FFFF dma 0x40120000 0x4012FFFF sdio 0x40140000 0x4014FFFF ahb 0x40130000 0x40137FFF interrupt controller 0x40800000 0x40803FFF gpio0 0x40804000 0x40807FFF gpio1 0x40808000 0x4080BFFF gpio2 0x4080C000 0x4080FFFF aon system timer 0x40824000 0x40827FFF aon timer 0x40828000 0x4082BFFF i2c 0x40834000 0x40837FFF uart2 0x40838000 0x4083BFFF pinmux 0x40840000 0x40843FFF clock 0x40844000 0x40847FFF spinlock 0x40850000 0x40853FFF sfc 0x42000000 0x43FFFFFF sfc cfg 0x40890000 0x4089FFFF","title":"Memory Map"},{"location":"chips/UWP5661/#interrupt-number","text":"","title":"Interrupt Number"},{"location":"chips/UWP5661/#nvic","text":"number name 0 INTC FIQ 1 INTC IRQ 18 wci2 20 INTC AON 21 timer0 22 timer1 23 timer2 26 system timer 35 uart0 36 uart1 37 common timer 40 watchdog","title":"NVIC"},{"location":"chips/UWP5661/#intc-fiq","text":"number name 1 soft irq","title":"INTC FIQ"},{"location":"chips/UWP5661/#intc-irq","text":"number name 1 soft irq","title":"INTC IRQ"},{"location":"chips/UWP5661/#intc-aon","text":"number name 1 soft irq 2 sfc 8 gpio2 9 gpio1 10 gpio0 12 uart2 16 aon system timer 17 i2c","title":"INTC AON"},{"location":"demos/","text":"Demo Applications The UNISOC Zephyr SDK contains possible demo applications, which are also referred to as profiles . Each profile corresponds to a user scenario. W-Fi Repeater This expands the range of your 802.11b/g/n/ac wireless network by repeating the signal from your wireless router and redistributing it to create a second network.","title":"Overview"},{"location":"demos/#demo-applications","text":"The UNISOC Zephyr SDK contains possible demo applications, which are also referred to as profiles . Each profile corresponds to a user scenario.","title":"Demo Applications"},{"location":"demos/#w-fi-repeater","text":"This expands the range of your 802.11b/g/n/ac wireless network by repeating the signal from your wireless router and redistributing it to create a second network.","title":"W-Fi Repeater"},{"location":"demos/wifi_repeater/","text":"Wi-Fi Repeater User Guide To make the Wi-Fi repeater work, please follow the procedure below: 0. Install Smart Repeater to your phone. Download the Smart Repeater . Connect your phone to the PC, and use the following command to install it. adb install smartRepeater_Wxx.xx.x.apk 1. Power on the board by connect UART0 to your PC/AC adapter. 2: Open Smart Repeater and connect to the board through BLE. Tap the scan button. Choose uwp566X_XXXX , and wait for the connection. 3. Configure Wi-Fi Station by Smart Repeater. Tap the menu button, and choose WiFi Manager . Tap OPEN WIFI . Tap WIFI SCAN , and wait for the scanning. Tap the drop-down menu, and select the target router. Enter the password. Tap CONNECT , and wait for the connection. 4. Configure Wi-Fi AP by Smart Repeater. After the connection is completed, tap START AP . At last, Remember the AP\u2019s MAC . Note: STA should be connected before starting AP. When STA is connected to any AP, the green light will be turned on. When AP is started, the blue light will be turned on. When both green and blue light are turned on, the Wi-Fi repeater is ready to work. The repeater's SSID is UNISOC_XXXXXX by default, while XXXXXX is the NIC of AP\u2019s MAC. The repeater's password is the same as the router's by default. Now you can connect your phone to the repeater, and open any website in the browser to check whether the repeater works.","title":"Wi-Fi Repeater"},{"location":"demos/wifi_repeater/#wi-fi-repeater-user-guide","text":"To make the Wi-Fi repeater work, please follow the procedure below:","title":"Wi-Fi Repeater User Guide"},{"location":"demos/wifi_repeater/#0-install-smart-repeater-to-your-phone","text":"Download the Smart Repeater . Connect your phone to the PC, and use the following command to install it. adb install smartRepeater_Wxx.xx.x.apk","title":"0. Install Smart Repeater to your phone."},{"location":"demos/wifi_repeater/#1-power-on-the-board-by-connect-uart0-to-your-pcac-adapter","text":"","title":"1. Power on the board by connect UART0 to your PC/AC adapter."},{"location":"demos/wifi_repeater/#2-open-smart-repeater-and-connect-to-the-board-through-ble","text":"Tap the scan button. Choose uwp566X_XXXX , and wait for the connection.","title":"2: Open Smart Repeater and connect to the board through BLE."},{"location":"demos/wifi_repeater/#3-configure-wi-fi-station-by-smart-repeater","text":"Tap the menu button, and choose WiFi Manager . Tap OPEN WIFI . Tap WIFI SCAN , and wait for the scanning. Tap the drop-down menu, and select the target router. Enter the password. Tap CONNECT , and wait for the connection.","title":"3. Configure Wi-Fi Station by Smart Repeater."},{"location":"demos/wifi_repeater/#4-configure-wi-fi-ap-by-smart-repeater","text":"After the connection is completed, tap START AP . At last, Remember the AP\u2019s MAC .","title":"4. Configure Wi-Fi AP by Smart Repeater."},{"location":"demos/wifi_repeater/#note","text":"STA should be connected before starting AP. When STA is connected to any AP, the green light will be turned on. When AP is started, the blue light will be turned on. When both green and blue light are turned on, the Wi-Fi repeater is ready to work. The repeater's SSID is UNISOC_XXXXXX by default, while XXXXXX is the NIC of AP\u2019s MAC. The repeater's password is the same as the router's by default. Now you can connect your phone to the repeater, and open any website in the browser to check whether the repeater works.","title":"Note:"},{"location":"sdk/","text":"UNISOC Zephyr SDK The UNISOC Zephyr SDK is provided for convenience and ease of use. It provides everything you need for development of UNISOC hardware platform except the cross-compilation toolchain, including bootloader and Zephyr portings, top level customized applications and programming tools. Directory Structure apps: contains example profiles. build: contains Makefiles and scripts that control the building process. dloader: is the firmware downloading tool running on PC. fdl: is the firmware downloading program running on the board. firmware: contains the WCN modem binary. mcuboot: contains the MCUboot source code. zephyr: contains the Zephyr source code. Building UNISOC Zephyr SDK Updating Firmware Debugging","title":"Overview"},{"location":"sdk/#unisoc-zephyr-sdk","text":"The UNISOC Zephyr SDK is provided for convenience and ease of use. It provides everything you need for development of UNISOC hardware platform except the cross-compilation toolchain, including bootloader and Zephyr portings, top level customized applications and programming tools.","title":"UNISOC Zephyr SDK"},{"location":"sdk/#directory-structure","text":"apps: contains example profiles. build: contains Makefiles and scripts that control the building process. dloader: is the firmware downloading tool running on PC. fdl: is the firmware downloading program running on the board. firmware: contains the WCN modem binary. mcuboot: contains the MCUboot source code. zephyr: contains the Zephyr source code.","title":"Directory Structure"},{"location":"sdk/#building-unisoc-zephyr-sdk","text":"","title":"Building UNISOC Zephyr SDK"},{"location":"sdk/#updating-firmware","text":"","title":"Updating Firmware"},{"location":"sdk/#debugging","text":"","title":"Debugging"},{"location":"sdk/build/","text":"How to Build UNISOC Zephyr SDK Downloading source code If you haven't installed repo yet, please install it first. sudo apt-get install repo To download the source code, please follow the commands below: mkdir unisoc_zephyr_sdk cd unisoc_zephyr_sdk repo init -u https://github.com/unisoc/manifests.git -b master repo sync repo start --all master Setting up Development Environment Install Requirements and Dependencies Install Python Dependencies Install the Zephyr Software Development Kit For more information, please refer to Getting Started Guide . Choosing your board The UNISOC Zephyr SDK supports building multiple boards. 96b_ivy5661 Choosing your profile The UNISOC Zephyr SDK supports building multiple profiles. All supported profiles are stored in the directory apps , and can be listed by the following command: repeater Building To build a specific profile for a specific board, use the following the command: BOARD=96b_ivy5661 PROFILE=repeater make Note that the default board is 96b_ivy5661 , while the default profile is repeater . After the compilation, the images can be found in the directory output/repeater/images/ . fdl*.bin - Firmware downloader mcuboot-pubkey*.bin - Bootloader zephyr-signed-ota*.bin - Kernel wcn-modem* - WCN Modem","title":"Build UNISOC SDK"},{"location":"sdk/build/#how-to-build-unisoc-zephyr-sdk","text":"","title":"How to Build UNISOC Zephyr SDK"},{"location":"sdk/build/#downloading-source-code","text":"If you haven't installed repo yet, please install it first. sudo apt-get install repo To download the source code, please follow the commands below: mkdir unisoc_zephyr_sdk cd unisoc_zephyr_sdk repo init -u https://github.com/unisoc/manifests.git -b master repo sync repo start --all master","title":"Downloading source code"},{"location":"sdk/build/#setting-up-development-environment","text":"Install Requirements and Dependencies Install Python Dependencies Install the Zephyr Software Development Kit For more information, please refer to Getting Started Guide .","title":"Setting up Development Environment"},{"location":"sdk/build/#choosing-your-board","text":"The UNISOC Zephyr SDK supports building multiple boards. 96b_ivy5661","title":"Choosing your board"},{"location":"sdk/build/#choosing-your-profile","text":"The UNISOC Zephyr SDK supports building multiple profiles. All supported profiles are stored in the directory apps , and can be listed by the following command: repeater","title":"Choosing your profile"},{"location":"sdk/build/#building","text":"To build a specific profile for a specific board, use the following the command: BOARD=96b_ivy5661 PROFILE=repeater make Note that the default board is 96b_ivy5661 , while the default profile is repeater . After the compilation, the images can be found in the directory output/repeater/images/ . fdl*.bin - Firmware downloader mcuboot-pubkey*.bin - Bootloader zephyr-signed-ota*.bin - Kernel wcn-modem* - WCN Modem","title":"Building"},{"location":"sdk/debug/","text":"How to Debug At present, debugging with the J-Link and GDB is the only choice. To set the debugging environment, please follow the procedure below: Step 0 : Download J-Link Software Pack and install it. sudo dpkg -i Downloads/JLink_Linux_V630b_x86_64.deb Step 1 : Download Unisoc_UWP566X.JLinkScript and put it to /opt/SEGGER/JLink/Samples/JLink/Scripts . cp Unisoc_UWP566X.JLinkScript /opt/SEGGER/JLink/Samples/JLink/Scripts Step 2 : Start the J-Link GDB server JLinkGDBServer -device Cortex-M4 -endian little -if SWD -speed 8000 -jlinkscriptfile /opt/SEGGER/JLink/Samples/JLink/Scripts/Unisoc_UWP566X.JLinkScript Step 3 : Start the debug session using GDB client","title":"Debugging"},{"location":"sdk/debug/#how-to-debug","text":"At present, debugging with the J-Link and GDB is the only choice. To set the debugging environment, please follow the procedure below:","title":"How to Debug"},{"location":"sdk/debug/#step-0-download-j-link-software-pack-and-install-it","text":"sudo dpkg -i Downloads/JLink_Linux_V630b_x86_64.deb","title":"Step 0: Download J-Link Software Pack and install it."},{"location":"sdk/debug/#step-1-download-unisoc_uwp566xjlinkscript-and-put-it-to-optseggerjlinksamplesjlinkscripts","text":"cp Unisoc_UWP566X.JLinkScript /opt/SEGGER/JLink/Samples/JLink/Scripts","title":"Step 1: Download Unisoc_UWP566X.JLinkScript and put it to /opt/SEGGER/JLink/Samples/JLink/Scripts."},{"location":"sdk/debug/#step-2-start-the-j-link-gdb-server","text":"JLinkGDBServer -device Cortex-M4 -endian little -if SWD -speed 8000 -jlinkscriptfile /opt/SEGGER/JLink/Samples/JLink/Scripts/Unisoc_UWP566X.JLinkScript","title":"Step 2: Start the J-Link GDB server"},{"location":"sdk/debug/#step-3-start-the-debug-session-using-gdb-client","text":"","title":"Step 3: Start the debug session using GDB client"},{"location":"sdk/releases/","text":"Releases v0.3.3 Major enhancements with this release WIFIMGR: Use work queue to offload event timeout handling. SIPC: Disable IRQ relay for some WIFI interrupts which are polled by CP. Flash: Support flash page layout. IWNPI: Implement hw_test interface to mp test. Zephyr: Enable NEWLIBC to support more features. FDL: Refactor fdl to use UART interrupt instead of polling. Various bugs fix. Commits Application 2018-12-04 11:22:01 +0800-4128b15-Dong Xiang: repeater: Enable NEWLIBC. 2018-12-04 11:22:01 +0800-4fb4ab2-Dong Xiang: Repeater: Enable ASSERT to get more messages when crashed. 2018-12-03 10:05:41 +0800-e576de9-Jessie.Xin: mp_test: iwnpi: add support to driver new api of hw_test 2018-12-03 09:53:18 +0800-37a41a2-ling.zhou: mesh_light: Remove unused ipi configuration Remove unused ipi configuration leading to a compile error Build 2018-11-29 16:46:51 +0800-964e890-Keguang Zhang: update_fw.sh: update the wrapper script of dloader 2018-11-28 18:51:50 +0800-4a3c0fa-Keguang Zhang: root.mk: Update Makefile to support fdl Firmware 2018-12-04 17:32:01 +0800-5f66a83-Keguang Zhang: Update WCN modem binary 2018-11-29 10:59:41 +0800-dac1e50-Dong Xiang: wifi: disable BB_TS_INT interrupt by firmware. Zephyr 2018-12-03 19:11:09 +0800-2e8f573-Stephen.Zhang: drivers: flash: Adapt uwp configs to call setting subsys. 2018-12-03 11:03:48 +0800-2b894c0-Jessie.Xin: include: net: fix build warning in wifi_drv_api 2018-12-03 10:30:02 +0800-ce984db-Keguang Zhang: subsys: wifi: use workqueue to offload event timeout handling 2018-11-30 18:39:02 +0800-20de07c-Keguang Zhang: subsys: wifi: improve WiFi manager 2018-11-30 15:51:49 +0800-ca0e607-Bub Wei: drivers: wifi: Implement hw_test api 2018-11-30 15:48:28 +0800-32b5989-Jessie.Xin: include: net: add new wifi driver api for hw_test HAL 2018-12-04 15:26:28 +0800-7cf5027-Dong Xiang: drivers: sipc: Enable NVIC_INT_REQ_COM_TMR relay to avoid wifi scan issue. 2018-12-03 19:13:47 +0800-34f5e48-Stephen.Zhang: drivers: sfc: Code implements for lock/unlock api on xip. 2018-11-29 11:02:38 +0800-9b01b4a-Dong Xiang: drivers: sipc: Disable all WIFI irq relay.","title":"Releases"},{"location":"sdk/releases/#releases","text":"","title":"Releases"},{"location":"sdk/releases/#v033","text":"","title":"v0.3.3"},{"location":"sdk/releases/#major-enhancements-with-this-release","text":"WIFIMGR: Use work queue to offload event timeout handling. SIPC: Disable IRQ relay for some WIFI interrupts which are polled by CP. Flash: Support flash page layout. IWNPI: Implement hw_test interface to mp test. Zephyr: Enable NEWLIBC to support more features. FDL: Refactor fdl to use UART interrupt instead of polling. Various bugs fix.","title":"Major enhancements with this release"},{"location":"sdk/releases/#commits","text":"","title":"Commits"},{"location":"sdk/releases/#application","text":"2018-12-04 11:22:01 +0800-4128b15-Dong Xiang: repeater: Enable NEWLIBC. 2018-12-04 11:22:01 +0800-4fb4ab2-Dong Xiang: Repeater: Enable ASSERT to get more messages when crashed. 2018-12-03 10:05:41 +0800-e576de9-Jessie.Xin: mp_test: iwnpi: add support to driver new api of hw_test 2018-12-03 09:53:18 +0800-37a41a2-ling.zhou: mesh_light: Remove unused ipi configuration Remove unused ipi configuration leading to a compile error","title":"Application"},{"location":"sdk/releases/#build","text":"2018-11-29 16:46:51 +0800-964e890-Keguang Zhang: update_fw.sh: update the wrapper script of dloader 2018-11-28 18:51:50 +0800-4a3c0fa-Keguang Zhang: root.mk: Update Makefile to support fdl","title":"Build"},{"location":"sdk/releases/#firmware","text":"2018-12-04 17:32:01 +0800-5f66a83-Keguang Zhang: Update WCN modem binary 2018-11-29 10:59:41 +0800-dac1e50-Dong Xiang: wifi: disable BB_TS_INT interrupt by firmware.","title":"Firmware"},{"location":"sdk/releases/#zephyr","text":"2018-12-03 19:11:09 +0800-2e8f573-Stephen.Zhang: drivers: flash: Adapt uwp configs to call setting subsys. 2018-12-03 11:03:48 +0800-2b894c0-Jessie.Xin: include: net: fix build warning in wifi_drv_api 2018-12-03 10:30:02 +0800-ce984db-Keguang Zhang: subsys: wifi: use workqueue to offload event timeout handling 2018-11-30 18:39:02 +0800-20de07c-Keguang Zhang: subsys: wifi: improve WiFi manager 2018-11-30 15:51:49 +0800-ca0e607-Bub Wei: drivers: wifi: Implement hw_test api 2018-11-30 15:48:28 +0800-32b5989-Jessie.Xin: include: net: add new wifi driver api for hw_test","title":"Zephyr"},{"location":"sdk/releases/#hal","text":"2018-12-04 15:26:28 +0800-7cf5027-Dong Xiang: drivers: sipc: Enable NVIC_INT_REQ_COM_TMR relay to avoid wifi scan issue. 2018-12-03 19:13:47 +0800-34f5e48-Stephen.Zhang: drivers: sfc: Code implements for lock/unlock api on xip. 2018-11-29 11:02:38 +0800-9b01b4a-Dong Xiang: drivers: sipc: Disable all WIFI irq relay.","title":"HAL"},{"location":"sdk/update_firmware/","text":"How to Update Firmware To update firmware, please follow the procedure below: Step 0 : Install the flash programming tool before everything. Download the dloader and install it. sudo dpkg -i dloader_0.x.x-1_amd64.deb In addition, you can build the dloader. make dloader Step 1 : Switch bootstrap pin to Download mode. Step 2 : Close the serial port tool on your PC, such as minicom. Step 3 : Power on the board, and check the name of your serial port. $ dmesg | tail [18063.042470] usb 1-1.4: new full-speed USB device number 10 using ehci-pci [18063.137325] usb 1-1.4: New USB device found, idVendor=10c4, idProduct=ea60 [18063.137332] usb 1-1.4: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [18063.137335] usb 1-1.4: Product: CP2104 USB to UART Bridge Controller [18063.137338] usb 1-1.4: Manufacturer: Silicon Labs [18063.137341] usb 1-1.4: SerialNumber: 018B5764 [18063.138117] cp210x 1-1.4:1.0: cp210x converter detected [18063.210553] usb 1-1.4: reset full-speed USB device number 10 using ehci-pci [18063.303396] usb 1-1.4: cp210x converter now attached to ttyUSB0 Step 4 : Updating firmware by the following commands. cd output/repeater/images ./update_fw.sh Note that the default serial port name of the board is ttyUSB0 . Otherwise, you should specify the serial port name got from Step 2 . cd output/repeater/images ./update_fw.sh -d ttyUSB0 Step 5 : Switch bootstrap pin to Boot mode and push the reset button. To update one image or several images, please refer to help of update_fw.sh . ./update_fw.sh -h","title":"Updating firmware"},{"location":"sdk/update_firmware/#how-to-update-firmware","text":"To update firmware, please follow the procedure below:","title":"How to Update Firmware"},{"location":"sdk/update_firmware/#step-0-install-the-flash-programming-tool-before-everything","text":"Download the dloader and install it. sudo dpkg -i dloader_0.x.x-1_amd64.deb In addition, you can build the dloader. make dloader","title":"Step 0: Install the flash programming tool before everything."},{"location":"sdk/update_firmware/#step-1-switch-bootstrap-pin-to-download-mode","text":"","title":"Step 1: Switch bootstrap pin to Download mode."},{"location":"sdk/update_firmware/#step-2-close-the-serial-port-tool-on-your-pc-such-as-minicom","text":"","title":"Step 2: Close the serial port tool on your PC, such as minicom."},{"location":"sdk/update_firmware/#step-3-power-on-the-board-and-check-the-name-of-your-serial-port","text":"$ dmesg | tail [18063.042470] usb 1-1.4: new full-speed USB device number 10 using ehci-pci [18063.137325] usb 1-1.4: New USB device found, idVendor=10c4, idProduct=ea60 [18063.137332] usb 1-1.4: New USB device strings: Mfr=1, Product=2, SerialNumber=3 [18063.137335] usb 1-1.4: Product: CP2104 USB to UART Bridge Controller [18063.137338] usb 1-1.4: Manufacturer: Silicon Labs [18063.137341] usb 1-1.4: SerialNumber: 018B5764 [18063.138117] cp210x 1-1.4:1.0: cp210x converter detected [18063.210553] usb 1-1.4: reset full-speed USB device number 10 using ehci-pci [18063.303396] usb 1-1.4: cp210x converter now attached to ttyUSB0","title":"Step 3: Power on the board, and check the name of your serial port."},{"location":"sdk/update_firmware/#step-4-updating-firmware-by-the-following-commands","text":"cd output/repeater/images ./update_fw.sh Note that the default serial port name of the board is ttyUSB0 . Otherwise, you should specify the serial port name got from Step 2 . cd output/repeater/images ./update_fw.sh -d ttyUSB0","title":"Step 4: Updating firmware by the following commands."},{"location":"sdk/update_firmware/#step-5-switch-bootstrap-pin-to-boot-mode-and-push-the-reset-button","text":"To update one image or several images, please refer to help of update_fw.sh . ./update_fw.sh -h","title":"Step 5: Switch bootstrap pin to Boot mode and push the reset button."},{"location":"tools/","text":"","title":"Overview"},{"location":"tools/dloader/","text":"DLoader WHAT IS THIS? DLoader is the firmware downloading tool for Unisoc MCU modules. SOURCE CODE git clone https://github.com/unisoc/dloader.git INSTALLATION ./configure make sudo make install See the file INSTALL for compilation and installation instructions. USAGE Please run dloader for a list and explanation of options. However, it is recommended to use the wrapper script update_fw.sh . $ ./update_fw.sh -h Usage: update_fw.sh [-d] device [-i] path [-abhkmu] -d: specify the device name of the serial port. -i: specify the path which contains images. -a: flash all images. -b: flash bootloader. -k: flash kernel. -m: flash modem. -u: flash userdata -h: display help.","title":"DLoader"},{"location":"tools/dloader/#dloader","text":"","title":"DLoader"},{"location":"tools/dloader/#what-is-this","text":"DLoader is the firmware downloading tool for Unisoc MCU modules.","title":"WHAT IS THIS?"},{"location":"tools/dloader/#source-code","text":"git clone https://github.com/unisoc/dloader.git","title":"SOURCE CODE"},{"location":"tools/dloader/#installation","text":"./configure make sudo make install See the file INSTALL for compilation and installation instructions.","title":"INSTALLATION"},{"location":"tools/dloader/#usage","text":"Please run dloader for a list and explanation of options. However, it is recommended to use the wrapper script update_fw.sh . $ ./update_fw.sh -h Usage: update_fw.sh [-d] device [-i] path [-abhkmu] -d: specify the device name of the serial port. -i: specify the path which contains images. -a: flash all images. -b: flash bootloader. -k: flash kernel. -m: flash modem. -u: flash userdata -h: display help.","title":"USAGE"},{"location":"tools/zperf/","text":"zperf WHAT IS THIS? zperf is a network traffic generator for Zephyr that may be used to evaluate network bandwidth. SOURCE CODE git clone https://github.com/unisoc/apps.git cd apps/zperf BUILD 1) Please setup environment as the below URL. Build UNISOC SDK 2) Set PROFILE to zperf and make PROFILE=zperf make 3) See the build result and check if binaries generated. cd output/zperf/images UPDATE FIRMWARE Please update firmware as the below URL. Update firmware USAGE For details, please refer to the following URL. Zephyr zperf guide Here are examples. UDP RX: 1) Run on board zperf udp download 5001 2) Run on PC iperf -l 1K -c 192.168.20.127 -p 5001 -i 1 -u UDP TX: 1) Run on PC iperf -s -l 1K -u -B 192.168.1.142 2) Run on board zperf udp upload 192.168.1.142 5001 10 1K 100M TCP RX: 1) Run on board zperf tcp download 5001 2) Run on PC iperf -l 1K -c 192.168.20.127 -p 5001 -i 1 TCP TX: 1) Run on PC iperf -s -l 1K -B 192.168.1.142 2) Run on board zperf tcp upload 192.168.1.142 5001 10 1K 100M","title":"zperf"},{"location":"tools/zperf/#zperf","text":"","title":"zperf"},{"location":"tools/zperf/#what-is-this","text":"zperf is a network traffic generator for Zephyr that may be used to evaluate network bandwidth.","title":"WHAT IS THIS?"},{"location":"tools/zperf/#source-code","text":"git clone https://github.com/unisoc/apps.git cd apps/zperf","title":"SOURCE CODE"},{"location":"tools/zperf/#build","text":"1) Please setup environment as the below URL. Build UNISOC SDK 2) Set PROFILE to zperf and make PROFILE=zperf make 3) See the build result and check if binaries generated. cd output/zperf/images","title":"BUILD"},{"location":"tools/zperf/#update-firmware","text":"Please update firmware as the below URL. Update firmware","title":"UPDATE FIRMWARE"},{"location":"tools/zperf/#usage","text":"For details, please refer to the following URL. Zephyr zperf guide Here are examples. UDP RX: 1) Run on board zperf udp download 5001 2) Run on PC iperf -l 1K -c 192.168.20.127 -p 5001 -i 1 -u UDP TX: 1) Run on PC iperf -s -l 1K -u -B 192.168.1.142 2) Run on board zperf udp upload 192.168.1.142 5001 10 1K 100M TCP RX: 1) Run on board zperf tcp download 5001 2) Run on PC iperf -l 1K -c 192.168.20.127 -p 5001 -i 1 TCP TX: 1) Run on PC iperf -s -l 1K -B 192.168.1.142 2) Run on board zperf tcp upload 192.168.1.142 5001 10 1K 100M","title":"USAGE"}]}